openapi: 3.0.3
info:
  title: Inmobiliaria Bonpland API
  version: 1.0.0
  description: Welcome to the Bonpland Real Estate API documentation. This guide provides
    detailed information on all available endpoints, including the HTTP methods they
    accept, the parameters they require, and the response formats they return. This
    documentation is designed to be a useful reference for both developers who maintain
    and extend the API, and frontend developers who consume it in their client applications.
    If you have any questions or encounter any problems, feel free to contact the
    development team.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/v1/user/jwt/login/:
    post:
      operationId: jwt_authenticate_user
      description: |-
        Handle POST requests for user authentication.

        This method allows for the authentication of a user, it expects a POST request
        with their credentials. Successful authentication will result in the creation
        of the user's JSON Web Tokens if their credentials are valid, their account is
        active, and they have the necessary permissions to perform this action.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
            examples:
              DataValid:
                value:
                  email: user1@email.com
                  password: contraseña1234
                summary: Valid data for the request.
                description: |-
                  Valid credentials for a user. The following validations will be applied:
                  - **Email:** This field is required and must not exceed 40 characters.
                  - **Password:** This field is required and must not exceed 40 characters.

                  Request responses that include messages in Spanish indicate that these are messages intended for use on the frontend by the client.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  user_role:
                    type: string
              examples:
                ResponseOk:
                  value:
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                    user_role: searcher
                  summary: User authenticated
                  description: The user has been successfully authenticated and the
                    access and refresh tokens are returned. The access token with
                    a duration of 2:00:00 minutes used to access protected API resources.
                    This token is sent with each request to the server to authenticate
                    the user, while the refresh token with a duration of 1 day, 0:00:00
                    day that is used to obtain new JSON Web Tokens without requiring
                    the user to authenticate again. This is useful when the access
                    token has expired, but the user should still be authenticated.
          description: '**(OK)** Authenticated user.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                InvalidData:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                  summary: Invalid data
                  description: These are the possible error messages for each field.
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                AuthenticationFailed:
                  value:
                    code: authentication_failed
                    detail: Credenciales inválidas.
                  summary: Credentials invalid
                  description: The email or password provided is incorrect.
                UserInactive:
                  value:
                    code: authentication_failed
                    detail: Tu cuenta está inactiva. Te recomendamos revisar la bandeja
                      de entrada de tu correo electrónico para encontrar el mensaje
                      que te enviamos al registrarte. Ese correo incluye las instrucciones
                      para activar tu cuenta.
                  summary: Inactive user account
                  description: The user account is inactive.
          description: |-
            **(UNAUTHORIZED)** The user you are trying to authenticate is not authorized, this is due to some of the following reasons.
            - Invalid credentials.
            - The user's account has not been activated.
        '403':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                PermissionDenied:
                  value:
                    code: permission_denied
                    detail: The user does not have permissions to perform this action.
                  summary: Permission denied
                  description: This response appears when the user trying to authenticate
                    does not have the permissions to do so with JSON Web Token.
          description: '**(FORBIDDEN)** The user trying to authenticate does not have
            the permissions to do so with JSON Web Token.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: The connection to the database could not be established.
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/user/jwt/logout/:
    post:
      operationId: logout_user
      description: |-
        Handles POST requests for user logout.

        This method allows to logout an authenticated user. Wait for a POST request
        with the update token. A successful logout will consist of invalidating the
        access and refresh token by adding them to the blacklist.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
            examples:
              DataValid:
                value:
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxNTcyNzMwMiwiaWF0IjoxNzE1NjQwOTAyLCJqdGkiOiI0YjgwNjA2YTk3ODI0Y2U3YjZjNzIxZTBkYTE3YmUzMiIsInVzZXJfdXVpZCI6ImQ3YmEzNDcxLWVkMzktNDU0MS1hZjk5LWVlZmMxYzFkZWJiZCIsInJvbGUiOiJTZWFyY2hlclVzZXIifQ.JpRoGrk7GVDQmHrJnc1LelgzGMKmKvmXYKvAKQzhsWg
                summary: Valid data for the request.
                description: |-
                  Valid data for the request. The following validations will be applied:
                  - **Refresh token:** It is required, must be a valid token, it must not be expired and it should not exist on the blacklist.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
        required: true
      security:
      - JWTAuth: []
      responses:
        '200':
          description: '**(OK)** Successfully closed session.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                InvalidExpired:
                  value:
                    code: jwt_error
                    detail: access token is invalid or expired.
                  summary: Invalid or expired
                  description: The access or refresh token is invalid or has expired.
                TokenBlacklisted:
                  value:
                    code: jwt_error
                    detail: access token is blacklisted.
                  summary: Token exists in the blacklist
                  description: The access token exists in the blacklist. Tokens that
                    exist in the blacklist cannot be used in authentication processes
                    and creation of new tokens.
                AccessTokenNotProvided:
                  value:
                    code: authentication_failed
                    detail: Authentication credentials were not provided.
                  summary: Access token not provided
                  description: The access token was not provided.
          description: '**(UNAUTHORIZED)** The user''s JSON Web Token is not valid
            for logout.'
        '403':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                IsAuthenticated:
                  value:
                    code: permission_denied
                    detail: The user does not have permissions to perform this action.
                  summary: User is not authenticated
                  description: The user is not authenticated.
          description: '**(FORBIDDEN)** The user does not have permission to access
            this resource.'
        '404':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                UserNotFound:
                  value:
                    code: user_not_found
                    detail: The token user does not exist.
                  summary: User not found
                  description: The user in the provided JSON Web Tokens does not exist
                    in the database.
          description: '**(NOT_FOUND)** Some resources necessary for this process
            were not found in the database.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: The connection to the database could not be established.
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/user/jwt/update/:
    post:
      operationId: update_tokens
      description: |-
        Handle POST requests for token refresh.

        This method allows updating the JSON Web Tokens of an authenticated user,
        waiting for a POST request with the access and update tokens. A successful
        refresh will consist of creating new tokens to keep the user authenticated and
        invalidating the previous refresh token by adding it to the blacklist.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTokenRequest'
            examples:
              DataValid:
                value:
                  access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE1NjQ4MTAyLCJpYXQiOjE3MTU2NDA5MDIsImp0aSI6ImQ0YzEwYzEzMTgwODQ3YmNiNGU5NDMwMjFhYmQ3OGMyIiwidXNlcl91dWlkIjoiZDdiYTM0NzEtZWQzOS00NTQxLWFmOTktZWVmYzFjMWRlYmJkIiwicm9sZSI6IlNlYXJjaGVyVXNlciJ9.C5W1Q4XLBRXUbSUtKcESvudwo6-Ylg8u1fZZ4i79GWw
                  refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxNTcyNzMwMiwiaWF0IjoxNzE1NjQwOTAyLCJqdGkiOiI0YjgwNjA2YTk3ODI0Y2U3YjZjNzIxZTBkYTE3YmUzMiIsInVzZXJfdXVpZCI6ImQ3YmEzNDcxLWVkMzktNDU0MS1hZjk5LWVlZmMxYzFkZWJiZCIsInJvbGUiOiJTZWFyY2hlclVzZXIifQ.JpRoGrk7GVDQmHrJnc1LelgzGMKmKvmXYKvAKQzhsWg
                summary: Valid data for the request.
                description: |-
                  Valid data for the request. The following validations will be applied:
                  - **Access token:** It is required, must be a valid token, must be expired and it should not exist on the blacklist.
                  - **Refresh token:** It is required, must be a valid token, it must not be expired and it should not exist on the blacklist.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTokenRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
              examples:
                ResponseOk:
                  value:
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzE1NjQ4MTAyLCJpYXQiOjE3MTU2NDA5MDIsImp0aSI6ImQ0YzEwYzEzMTgwODQ3YmNiNGU5NDMwMjFhYmQ3OGMyIiwidXNlcl91dWlkIjoiZDdiYTM0NzEtZWQzOS00NTQxLWFmOTktZWVmYzFjMWRlYmJkIiwicm9sZSI6IlNlYXJjaGVyVXNlciJ9.C5W1Q4XLBRXUbSUtKcESvudwo6-Ylg8u1fZZ4i79GWw
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxNTcyNzMwMiwiaWF0IjoxNzE1NjQwOTAyLCJqdGkiOiI0YjgwNjA2YTk3ODI0Y2U3YjZjNzIxZTBkYTE3YmUzMiIsInVzZXJfdXVpZCI6ImQ3YmEzNDcxLWVkMzktNDU0MS1hZjk5LWVlZmMxYzFkZWJiZCIsInJvbGUiOiJTZWFyY2hlclVzZXIifQ.JpRoGrk7GVDQmHrJnc1LelgzGMKmKvmXYKvAKQzhsWg
                  summary: New tokens generated
                  description: The new access and refresh tokens have been generated
                    successfully, you can use these new tokens to keep the user authenticated.
          description: '**(OK)** New tokens are generated.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                InvalidData:
                  value:
                    code: invalid_request_data
                    detail:
                      refresh_token:
                      - This field is required.
                      - This field may not be blank.
                      - This field may not be null.
                      - Not a valid string.
                      access_token:
                      - This field is required.
                      - This field may not be blank.
                      - This field may not be null.
                      - Not a valid string.
                  summary: Invalid data
                  description: These are the possible error messages for each field.
          description: '**(BAD_REQUEST)** The request data are invalid, error message(s)
            are returned for each field that did not pass the validations.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                InvalidExpired:
                  value:
                    code: jwt_error
                    detail: refresh token is invalid or expired.
                  summary: Invalid or expired
                  description: The access or refresh token is invalid or has expired.
                TokenBlacklisted:
                  value:
                    code: jwt_error
                    detail: access token is blacklisted.
                  summary: Token exists in the blacklist
                  description: The access token exists in the blacklist. Tokens that
                    exist in the blacklist cannot be used in authentication processes
                    and creation of new tokens.
                AccessTokenNotExpired:
                  value:
                    code: jwt_error
                    detail: Access token is not expired.
                  summary: Access token not expired
                  description: New JSON Web Tokens can only be created for a user
                    if their access token has expired.
          description: '**(UNAUTHORIZED)** The user''s JSON Web Token is not valid
            for logout.'
        '404':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                TokenNotFound:
                  value:
                    code: jwt_not_found
                    detail: access or refresh token is not in the outstanding token
                      list.
                  summary: Token not found
                  description: The JSON Web Tokens provided do not exist in the database.
                UserNotFound:
                  value:
                    code: user_not_found
                    detail: The token user does not exist.
                  summary: User not found
                  description: The user in the provided JSON Web Tokens does not exist
                    in the database.
          description: '**(NOT_FOUND)** Some resources necessary for this process
            were not found in the database.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: The connection to the database could not be established.
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
  /api/v1/user/searcher/:
    get:
      operationId: get_searcher_user
      description: |-
        Handle GET requests to obtain user information.

        This method returns the user account information associated with the request's
        access token, without revealing sensitive data, provided the user has
        permission to read their own information.
      tags:
      - Users
      security:
      - JWTAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  base_data:
                    type: object
                  role_data:
                    type: object
              examples:
                ResponseOk:
                  value:
                    base_data:
                      email: user@email.com
                    role_data:
                      name: Nombre del usuario
                      last_name: Apellido del usuario
                      cc: '1234567890'
                      phone_number: '+573111111111'
                      address: Calle 123
                      is_phone_verified: false
                  summary: Get user data
                  description: User information is displayed without showing sensitive
                    data, it is possible that some of this data has a 'null' value.
          description: '**(OK)** The requested user information is returned.'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                InvalidExpired:
                  value:
                    code: jwt_error
                    detail: access token is invalid or expired.
                  summary: Access token invalid or expired
                  description: The access token is invalid or has expired.
                TokenBlacklisted:
                  value:
                    code: jwt_error
                    detail: access token is blacklisted.
                  summary: Access token exists in the blacklist
                  description: The access token exists in the blacklist.
                AccessTokenNotProvided:
                  value:
                    code: authentication_failed
                    detail: Authentication credentials were not provided.
                  summary: Access token not provided
                  description: The access token was not provided.
          description: '**(UNAUTHORIZED)** The user''s JSON Web Token is not valid
            for logout.'
        '403':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                IsAuthenticated:
                  value:
                    code: permission_denied
                    detail: The user does not have permissions to perform this action.
                  summary: User is not authenticated
                  description: The user is not authenticated.
          description: '**(FORBIDDEN)** The user does not have permission to access
            this resource.'
        '404':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                UserNotFound:
                  value:
                    code: user_not_found
                    detail: The token user does not exist.
                  summary: User not found
                  description: The user in the provided JSON Web Tokens does not exist
                    in the database.
          description: '**(NOT_FOUND)** Some resources necessary for this process
            were not found in the database.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: The connection to the database could not be established.
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
    post:
      operationId: create_searcher_user
      description: |-
        Handle POST requests for searcher user registration.

        This method allows the registration of a new seacher user, waiting for a
        POST request with the registration data. A successful registration will
        consist of saving the user's information in the database and sending a
        message to the user's email with a link that will allow them to activate
        their account.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearcherRegisterUserRequest'
            examples:
              DataValid:
                value:
                  name: Nombres del usuario
                  last_name: Apellidos del usuario
                  email: user1@email.com
                  password: contraseña1234
                  confirm_password: contraseña1234
                summary: Register a new user with role searcher.
                description: "A valid user registration data. The following validations\
                  \ will be applied:\n- **Name and last_name:** This field is required,\
                  \ must not exceed 40 characters and must contain only letters and\
                  \ spaces.\n- **Email:** This field is required and must not exceed\
                  \ 40 characters, must follow standard email format, and must not\
                  \ be in use.\n- **Password:** This field is required and should\
                  \ be between 8 and 40 characters. It should not be a common password\
                  \ or contain only numbers. \n- **Confirm password:** This field\
                  \ is required and should match the password field.\n\nRequest responses\
                  \ that include messages in Spanish indicate that these are messages\
                  \ intended for use on the frontend by the client."
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SearcherRegisterUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SearcherRegisterUserRequest'
        required: true
      security:
      - {}
      responses:
        '201':
          description: '**(CREATED)** User created correctly.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
              examples:
                InvalidData:
                  value:
                    code: invalid_request_data
                    detail:
                      name:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      last_name:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      email:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      - Este correo electrónico ya está en uso.
                      password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 40 caracteres.
                      - El valor ingresado debe tener al menos 8 caracteres.
                      confirm_password:
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      - La contraseña debe contener al menos una mayuscula o una minuscula.
                      - Esta contraseña es demasiado común.
                      - Las contraseñas no coinciden.
                  summary: Invalid data
                  description: These are the possible error messages for each field.
          description: '**(BAD_REQUEST)** The request data is invalid, error messages
            are returned for each field that did not pass validations.'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: The connection to the database could not be established.
          description: '**(INTERNAL_SERVER_ERROR)** An unexpected error occurred.'
components:
  schemas:
    AuthenticationRequest:
      type: object
      description: |-
        Handles the data for user authentication. Checks that the provided email and
        password meet the necessary requirements.
      properties:
        email:
          type: string
          minLength: 1
          maxLength: 40
        password:
          type: string
          minLength: 1
          maxLength: 40
      required:
      - email
      - password
    LogoutRequest:
      type: object
      description: Handles data to logout user.
      properties:
        refresh_token:
          type: string
          minLength: 1
      required:
      - refresh_token
    SearcherRegisterUserRequest:
      type: object
      description: Defines the fields that are required for the searcher user registration.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 40
        name:
          type: string
          minLength: 1
          pattern: ^[A-Za-z\u00f1\u00d1\s]+$
          maxLength: 40
        last_name:
          type: string
          minLength: 1
          pattern: ^[A-Za-z\u00f1\u00d1\s]+$
          maxLength: 40
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - confirm_password
      - email
      - last_name
      - name
      - password
    UpdateTokenRequest:
      type: object
      description: Handles data to refresh tokens of a user.
      properties:
        access_token:
          type: string
          minLength: 1
        refresh_token:
          type: string
          minLength: 1
      required:
      - access_token
      - refresh_token
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        To use endpoints that employ **JSON Web Token** as an authentication tool, you must enter the access token you obtained when using the endpoint (`POST api/v1/user/jwt/login/`).

        **Example:**

        Bearer <access_token>
tags:
- name: Users
  description: It comprises all the endpoints that manage all the functionality related
    to a user in the API.
